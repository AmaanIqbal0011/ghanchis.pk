/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Article = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
};

export type HeroSection = {
  _id: string;
  _type: "heroSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
};

export type CollectionType = {
  _id: string;
  _type: "collectionType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  showOnCollectionsPage?: boolean;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderId?: string;
  userInfo?: {
    firstName?: string;
    lastName?: string;
    email?: string;
    address?: string;
    city?: string;
    country?: string;
    phoneNumber?: string;
    paymentMethod?: string;
    clerkId?: string;
  };
  basket?: Array<{
    quantity?: number;
    product?: {
      name?: string;
      price?: number;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      size?: {
        ageGroup?: string;
        chest?: number;
        fitting?: string;
        kameezLength?: number;
        name?: string;
        paienchaWidth?: number;
        shalwarLength?: number;
        shoulder?: number;
        sleevesLength?: number;
        sleevesStyle?: string;
      };
    };
    _type: "basketItem";
    _key: string;
  }>;
  totalPrice?: number;
  timestamp?: string;
  status?: "pending" | "completed";
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  price?: number;
  oldPrice?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  article?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "article";
  }>;
  collections?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "collectionType";
  }>;
  size?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "size";
  };
  colors?: Array<{
    _key: string;
  } & Color>;
  stock?: number;
  featured?: boolean;
  tags?: Array<string>;
  sku?: string;
  createdAt?: string;
  updatedAt?: string;
};

export type Size = {
  _id: string;
  _type: "size";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ageGroup?: Array<string>;
  slug?: Slug;
  kameezLength?: number;
  sleevesLength?: number;
  shoulder?: number;
  fitting?: "regular" | "slim" | "loose";
  chest?: number;
  shalwarLength?: number;
  paienchaWidth?: number;
  sleevesStyle?: "golla" | "cuff" | "straight" | "none";
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Article | HeroSection | Sale | CollectionType | Order | Category | Product | Size | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/products/getAllCategories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[            _type == "category"        ] | order(title asc)
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
}>;

// Source: ./src/sanity/lib/products/getAllCollection.ts
// Variable: ALL_COLLECTION_QUERY
// Query: *[            _type == "collectionType"        ] | order(title asc)
export type ALL_COLLECTION_QUERYResult = Array<{
  _id: string;
  _type: "collectionType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  showOnCollectionsPage?: boolean;
}>;

// Source: ./src/sanity/lib/products/getAllSize.ts
// Variable: ALL_SIZE_QUERY
// Query: *[            _type == "size"        ] | order(title asc)        //  {        //     name,        // }
export type ALL_SIZE_QUERYResult = Array<{
  _id: string;
  _type: "size";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  ageGroup?: Array<string>;
  slug?: Slug;
  kameezLength?: number;
  sleevesLength?: number;
  shoulder?: number;
  fitting?: "loose" | "regular" | "slim";
  chest?: number;
  shalwarLength?: number;
  paienchaWidth?: number;
  sleevesStyle?: "cuff" | "golla" | "none" | "straight";
}>;

// Source: ./src/sanity/lib/products/getHeroImages.ts
// Variable: ALL_HEROIMAGES_QUERY
// Query: *[_type == "heroSection"]{  "imageUrl": image.asset->url,  alt}
export type ALL_HEROIMAGES_QUERYResult = Array<{
  imageUrl: string | null;
  alt: string | null;
}>;

// Source: ./src/sanity/lib/products/getOrderById.ts
// Variable: PRODUCT_BY_ORDER_ID
// Query: *[_type == "order" && orderId == $orderId]{  orderId,  userInfo,  totalPrice,  status,  basket[]{    quantity,    product{      name,      price,      "imageUrl": image.asset->url,      size{        ageGroup,        chest,        fitting,        kameezLength,        name,        paienchaWidth,        shalwarLength,        shoulder,        sleevesLength,        sleevesStyle      }    }  },  totalPrice,  timestamp}
export type PRODUCT_BY_ORDER_IDResult = Array<{
  orderId: string | null;
  userInfo: {
    firstName?: string;
    lastName?: string;
    email?: string;
    address?: string;
    city?: string;
    country?: string;
    phoneNumber?: string;
    paymentMethod?: string;
    clerkId?: string;
  } | null;
  totalPrice: number | null;
  status: "completed" | "pending" | null;
  basket: Array<{
    quantity: number | null;
    product: {
      name: string | null;
      price: number | null;
      imageUrl: string | null;
      size: {
        ageGroup: string | null;
        chest: number | null;
        fitting: string | null;
        kameezLength: number | null;
        name: string | null;
        paienchaWidth: number | null;
        shalwarLength: number | null;
        shoulder: number | null;
        sleevesLength: number | null;
        sleevesStyle: string | null;
      } | null;
    } | null;
  }> | null;
  timestamp: string | null;
}>;

// Source: ./src/sanity/lib/products/getProductByAgeGroup.ts
// Variable: PRODUCT_BY_AGE
// Query: *[_type == "product" && $ageGroup in size->ageGroup[]] {      ...    }
export type PRODUCT_BY_AGEResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  price?: number;
  oldPrice?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  article?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "article";
  }>;
  collections?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "collectionType";
  }>;
  size?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "size";
  };
  colors?: Array<{
    _key: string;
  } & Color>;
  stock?: number;
  featured?: boolean;
  tags?: Array<string>;
  sku?: string;
  createdAt?: string;
  updatedAt?: string;
}>;

// Source: ./src/sanity/lib/products/getProductBySlug.ts
// Variable: PRODUCT_BY_SLUG
// Query: *[_type == "product" && slug.current == $slug][0]{    _id,    title,    slug,    price,    oldPrice,    stock,    images,    colors,    featured,    sku,    // references:    "size": size->{      _id,      name    },    "categories": category[]->{      _id,      name,    },    "collectionType": collections[]->{      _id,      title,    }  }
export type PRODUCT_BY_SLUGResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  price: number | null;
  oldPrice: number | null;
  stock: number | null;
  images: null;
  colors: Array<{
    _key: string;
  } & Color> | null;
  featured: boolean | null;
  sku: string | null;
  size: {
    _id: string;
    name: string | null;
  } | null;
  categories: Array<{
    _id: string;
    name: string | null;
  }> | null;
  collectionType: Array<{
    _id: string;
    title: string | null;
  }> | null;
} | null;

// Source: ./src/sanity/lib/products/getProductColor.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product"] | order(title asc) {  colors}
export type ALL_PRODUCTS_QUERYResult = Array<{
  colors: Array<{
    _key: string;
  } & Color> | null;
}>;

// Source: ./src/sanity/lib/products/searchProductByName.ts
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[            _type == "product"            && name match $searchParam        ] | order(name asc)
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  price?: number;
  oldPrice?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  article?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "article";
  }>;
  collections?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "collectionType";
  }>;
  size?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "size";
  };
  colors?: Array<{
    _key: string;
  } & Color>;
  stock?: number;
  featured?: boolean;
  tags?: Array<string>;
  sku?: string;
  createdAt?: string;
  updatedAt?: string;
}>;

// Source: ./src/sanity/lib/sales/getActiveSaleByCouponCode.ts
// Variable: Active_SALE_BY_COUPON_QUERY
// Query: *[            _type == "sale"            && isActive == true            && couponCode == $couponCode        ] | order(validFrom desc)[0]
export type Active_SALE_BY_COUPON_QUERYResult = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n        *[\n            _type == \"category\"\n        ] | order(title asc)\n        ": ALL_CATEGORIES_QUERYResult;
    "\n        *[\n            _type == \"collectionType\"\n        ] | order(title asc)\n        ": ALL_COLLECTION_QUERYResult;
    "\n        *[\n            _type == \"size\"\n        ] | order(title asc)\n        //  {\n        //     name,\n        // }\n        ": ALL_SIZE_QUERYResult;
    "\n        *[_type == \"heroSection\"]{\n  \"imageUrl\": image.asset->url,\n  alt\n}\n\n": ALL_HEROIMAGES_QUERYResult;
    "*[_type == \"order\" && orderId == $orderId]{\n  orderId,\n  userInfo,\n  totalPrice,\n  status,\n  basket[]{\n    quantity,\n    product{\n      name,\n      price,\n      \"imageUrl\": image.asset->url,\n      size{\n        ageGroup,\n        chest,\n        fitting,\n        kameezLength,\n        name,\n        paienchaWidth,\n        shalwarLength,\n        shoulder,\n        sleevesLength,\n        sleevesStyle\n      }\n    }\n  },\n  totalPrice,\n  timestamp\n}": PRODUCT_BY_ORDER_IDResult;
    "\n    *[_type == \"product\" && $ageGroup in size->ageGroup[]] {\n      ...\n    }\n  ": PRODUCT_BY_AGEResult;
    "\n    *[_type == \"product\" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    price,\n    oldPrice,\n    stock,\n    images,\n    colors,\n    featured,\n    sku,\n\n    // references:\n    \"size\": size->{\n      _id,\n      name\n    },\n    \"categories\": category[]->{\n      _id,\n      name,\n    },\n    \"collectionType\": collections[]->{\n      _id,\n      title,\n    }\n  }\n    ": PRODUCT_BY_SLUGResult;
    "\n   *[_type == \"product\"] | order(title asc) {\n  colors\n}\n\n\n  ": ALL_PRODUCTS_QUERYResult;
    "\n        *[\n            _type == \"product\"\n            && name match $searchParam\n        ] | order(name asc)\n        ": PRODUCT_SEARCH_QUERYResult;
    "\n        *[\n            _type == \"sale\"\n            && isActive == true\n            && couponCode == $couponCode\n        ] | order(validFrom desc)[0]\n        ": Active_SALE_BY_COUPON_QUERYResult;
  }
}
